@using System.ComponentModel
@using System.Numerics
<style>

    .ball {
        top: @(Sprite.Box.Top)px;
        left: @(Sprite.Box.Left)px;
        height: @(Sprite.Box.Width)px;
        width: @(Sprite.Box.Width)px;
        background-color: whitesmoke;
        position: absolute;
    }

 </style>

<div class="ball" />

@code {

    [Parameter]
    public Sprite Sprite { get ; set ; }


    
    /// <summary>
    /// refect two vectors and get the new direction
    /// </summary>
    /// <param name="spriteVector"></param>
    /// <param name="obstacleVector"></param>
    /// <returns></returns>
    protected double RefectDirection(Vector2 spriteVector, Vector2 obstacleVector)
    {
        var newVector = Vector2.Reflect(spriteVector,obstacleVector);
        var angleRads = Math.Atan2(newVector.Y,newVector.X);
        var direction = Sprite.ConvertToDegrees(angleRads);
        return direction;
    }

    protected double RefectVerticleDirection(Sprite sprite)
    {
        var obstacleVector = new Vector2(0,1); //vertical wall

        var direction = RefectDirection(sprite.Vector, obstacleVector);
        return direction;
    }

    protected double RefectHorizontalDirection(Sprite sprite)
    {
        var obstacleVector = new Vector2(1,0); //horizontal wall
        var direction = RefectDirection(sprite.Vector, obstacleVector);
        return direction;
    }

    protected override void OnParametersSet()
    {

        // init the timer update event
        Sprite.Render += (sender, args) => 
        {
      
            InvokeAsync(() => // threading dispatch wrapper
            {
                StateHasChanged();

            });
        };

        #region Physics & Math

        // reflect the vector
        // https://stackoverflow.com/questions/41129573/unity-how-to-use-vector2-reflect
        Sprite.Collide = (target) =>
        {
            Sprite.Direction = RefectVerticleDirection(Sprite);
        };

        

        Sprite.OutOfBounds = (bounds) =>
        {

            var vx = Sprite.Vx;
            var vy = Sprite.Vy;

            if (Sprite.Box.Left < bounds.Left ||
                Sprite.Box.Right > bounds.Right)
            {
                Sprite.Direction = RefectVerticleDirection(Sprite);
            }

            if (Sprite.Box.Top < bounds.Top ||
                Sprite.Box.Bottom > bounds.Bottom)
            {
                Sprite.Direction = RefectHorizontalDirection(Sprite);
            }

        };

        #endregion


    }
}
