@using System.ComponentModel
<style>

    .ball {
        top: @(Sprite.Box.Top)px;
        left: @(Sprite.Box.Left)px;
        height: @(Sprite.Box.Width)px;
        width: @(Sprite.Box.Width)px;
        background-color: whitesmoke;
        position: absolute;
    }

 </style>

<div class="ball" />

@code {

    [Parameter]
    public Sprite Sprite { get ; set ; }


    // get ot know your component lifecycle : 
    // https://docs.microsoft.com/en-us/aspnet/core/blazor/lifecycle?view=aspnetcore-3.1
    //

    protected override void OnParametersSet()
    {

        // init the timer update event
        Sprite.Render += (sender, args) => 
        {
          
            InvokeAsync(() => // threading dispatch wrapper
            {
                //make UI changes

                StateHasChanged();
            });
        };

        #region Physics & Math

        Sprite.Collide = (target) =>
        {

            var vx = Sprite.Vx;
            var vy = Sprite.Vy;

            if (Sprite.Box.Left < target.Box.Right)  // overlap left
            {
                vy = -Sprite.Vy;  // lame!  use reflected normalized vectors
            }

            var angle = Math.Atan2(vy, vx);
            Sprite.Direction = Sprite.ConvertToDegrees(angle);

        };

        Sprite.OutOfBounds = (bounds) =>
        {
            var vx = Sprite.Vx;
            var vy = Sprite.Vy;

            if (Sprite.Box.Left < bounds.Left ||
                Sprite.Box.Right > bounds.Right)
            {
                vy = -Sprite.Vy;
            }

            if (Sprite.Box.Top < bounds.Top ||
                Sprite.Box.Bottom > bounds.Bottom)
            {
                vx = -Sprite.Vx;
            }

            var angle = Math.Atan2(vy, vx);
            Sprite.Direction = Sprite.ConvertToDegrees(angle);


        };

        #endregion


    }
}
